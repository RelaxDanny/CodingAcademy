
우리는 주어진 pip들을 보고 주사위를 최적의 방법으로 모두 같은 숫자로 맞춰야 한다. 

주사위에는 1 부터 6까지의 pips가 있다.

pip은 주사위의 점을 말하며 각 pip들은 다음과 같은 성질을 가지고 있다.

pip의 1, 6
pip의 2, 5
pip의 3, 4 는 모두 서로 마주고보고 있는 면이고, 절대 양옆에 서로가 있을 수 없다.

예를 들어, 주사위의 윗면이 1이라고 할때, 주사위의 왼쪽, 오른쪽, 또는 가로, 세로 모두 6이 나올 수 없다.

주사위를 단 한칸만 뒤집을 수 있을 때, 주사위의 pip이 1이라면 한칸의 움직임으로 주사위는 2,3,4,5를 표현할 수 있다.
하지만 6을 표현하기 위해서는 서로 마주보고 있기에 한 번의 움직임으로 표현 할 수 없다.


[1, 1, 3]이 입력으로 주어졌다고 가정하자.
1을 3으로 만들기 위해서 주사위를 한 번만 뒤집으면 되니 이 방법은 1을 소모하고, 
두번째 1도 3으로 만들기 위해서는 한 번만 뒤집으면 되닌 1을 추가로 소모해,
[3,3,3]을 만들기 위해 총 2번의 움직임이 발생했다. 하지만, 주어진 입력 주사위 pip 리스트를
[1,1,1]로 바꾼다고 가정하였을때, 우리는 3에 대해서 한 번의 움직임으로 모든 주사위의 pip이 같아졌으므로 이 입력에 대한
최적의 정답은 바로 1이 된다.

입력: [1, 1, 3, 4]
출력: 2

입력: [1, 6, 1, 6] 
출력: 4

리스트의 최대 개수는 1 < N < 100이며 각 pip은 6을 넘지 않는다.

** 푸는 방법은 채점 요소에 들어가지 않습니다.
** Focus on Accuracy!


def dice(A):
    for i in range(len(A)):
        for j in range(len(A))"
            if i == 1 and j == 6:
                count += 2
            elif i == 2 and j == 5:
                count += 2
            
            ...
            elif i == j:
                count += 0
            else:
                count += 1

    return min(count_list)


listA = [1,2,3,4]
print(dice(listA))
















2차원 평면 위의 점 N개가 주어진다. 좌표를 x좌표가 증가하는 순으로, 

x좌표가 같으면 y좌표가 증가하는 순서로 정렬한 다음 출력하는 프로그램을 작성하시오.

첫째 줄에 점의 개수 N (1 ≤ N ≤ 100,000)이 주어진다. 둘째 줄부터 N개의 줄에는 i번점의 위치 xi와 yi가 주어진다. 

(-100,000 ≤ xi, yi ≤ 100,000) 좌표는 항상 정수이고, 위치가 같은 두 점은 없다

입력
5
3 4
1 1
1 -1
2 2
3 3

출력
1 -1
1 1
2 2
3 3
3 4